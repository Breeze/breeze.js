(function (testFns) {

  if (testFns.DEBUG_SEQUELIZE || testFns.DEBUG_ODATA || testFns.MONGO) {
    module("server-side delete", {});
    QUnit.skip("Mongo,OData and Sequelize do not yet support server side interception or these endpoints have not yet been implemented.", function() {

    });
    return;
  };

  var breeze = testFns.breeze;
  var core = breeze.core;
  var Enum = core.Enum;

  var MetadataStore = breeze.MetadataStore;
  var EntityManager = breeze.EntityManager;
  var AutoGeneratedKeyType = breeze.AutoGeneratedKeyType;
  var SaveOptions = breeze.SaveOptions;
  var EntityQuery = breeze.EntityQuery;
  var EntityKey = breeze.EntityKey;
  var EntityState = breeze.EntityState;
  var FilterQueryOp = breeze.FilterQueryOp;

  var newEm = testFns.newEm;

  var wellKnownData = testFns.wellKnownData;
  

  module("server-side delete", {
    beforeEach: function (assert) {
      testFns.setup(assert);
    },
    afterEach: function () {
    }
  });

  function createSupplierAndProduct(em) {
    var dt = new Date();
    var supplier = em.createEntity("Supplier", { companyName: "Sup-" + dt.getTime(), contactName: "Phillip Wiggs", location: { region: "Cornwall", country: "UK" } });
    var supplierID = supplier.getProperty("supplierID");
    var product = em.createEntity("Product", { productName: "Prod-" + dt.getTime(), supplierID: supplierID, quantityPerUnit: "EA", unitsInStock: 30 });
    return product;
  }

  test("delete new product on server before", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");
    var saveOptions = new SaveOptions({ tag: "deleteProductOnServer.Before" });

    em.saveChanges(null, saveOptions).then(function(sr) {
      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 1, "There should be one Supplier");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete new product on server after", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");
    var saveOptions = new SaveOptions({ tag: "deleteProductOnServer" });

    em.saveChanges(null, saveOptions).then(function(sr) {
      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 1, "There should be one Supplier");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete unchanged product on server", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");

    em.saveChanges().then(function(sr) {
      ok(product.entityAspect.entityState.isUnchanged(), "Product should be unchanged");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      supplier.setProperty("contactName", "Harry Arms");
  
      var saveOptions = new SaveOptions({ tag: "deleteProductOnServer:" + product.getProperty("productID") });
      return em.saveChanges(null, saveOptions);
    }).then(function(sr) {
      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 1, "There should be one Supplier");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete new supplier and product on server", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");
    var saveOptions = new SaveOptions({ tag: "deleteSupplierAndProductOnServer" });

    em.saveChanges(null, saveOptions).then(function(sr) {
      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isDetached(), "Supplier should be detached");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 0, "There should be no Suppliers");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete unchanged supplier and product on server", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");

    em.saveChanges().then(function(sr) {
      ok(product.entityAspect.entityState.isUnchanged(), "Product should be unchanged");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");

      var saveOptions = new SaveOptions({ tag: "deleteSupplierAndProductOnServer" });
          // supplier.getProperty("supplierID") + ":" + product.getProperty("productID") });
      return em.saveChanges([supplier, product], saveOptions);
    }).then(function(sr) {

      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isDetached(), "Supplier should be detached");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 0, "There should be no Suppliers");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete modified supplier and product on server", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");

    em.saveChanges().then(function(sr) {
      ok(product.entityAspect.entityState.isUnchanged(), "Product should be unchanged");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      supplier.setProperty("contactName", "Harry Arms");
      product.setProperty("unitsInStock", 25);

      var saveOptions = new SaveOptions({ tag: "deleteSupplierAndProductOnServer" }); 
          // supplier.getProperty("supplierID") + ":" + product.getProperty("productID") });
      return em.saveChanges(null, saveOptions);
    }).then(function(sr) {

      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isDetached(), "Supplier should be detached");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 0, "There should be no Suppliers");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete supplier on client and product on server", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");

    em.saveChanges().then(function(sr) {
      ok(product.entityAspect.entityState.isUnchanged(), "Product should be unchanged");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      supplier.entityAspect.setDeleted();

      var saveOptions = new SaveOptions({ tag: "deleteProductOnServer:" + product.getProperty("productID") });
      return em.saveChanges(null, saveOptions);
    }).then(function(sr) {

      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isDetached(), "Supplier should be detached");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 0, "There should be no Suppliers");
    }).fail(testFns.handleFail).fin(done);
  });

  test("delete product on client and supplier on server before save", function (assert) {
    var done = assert.async();

    var em = newEm();
    var product = createSupplierAndProduct(em);
    var supplier = product.getProperty("supplier");

    em.saveChanges().then(function(sr) {
      ok(product.entityAspect.entityState.isUnchanged(), "Product should be unchanged");
      ok(supplier.entityAspect.entityState.isUnchanged(), "Supplier should be unchanged");
      product.entityAspect.setDeleted();

      var saveOptions = new SaveOptions({ tag: "deleteSupplierOnServer.Before" });
      return em.saveChanges(null, saveOptions);
    }).then(function(sr) {

      ok(product.entityAspect.entityState.isDetached(), "Product should be detached");
      ok(supplier.entityAspect.entityState.isDetached(), "Supplier should be detached");
      var addedProducts = em.getEntities(["Product"]);
      ok(addedProducts.length === 0, "There should be no Products");
      var addedSuppliers = em.getEntities(["Supplier"]);
      ok(addedSuppliers.length === 0, "There should be no Suppliers");
    }).fail(testFns.handleFail).fin(done);
  });

})(breezeTestFns);